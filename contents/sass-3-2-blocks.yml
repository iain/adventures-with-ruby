--- 
html: |
  <p>A lot of websites have side bars. On normal desktop browsers, this fits nicely. But
  on smaller screens, it will create horizontal scrollbars. And those are a bad
  user experience. Luckily, CSS supports <code>@media</code> directives that act on
  different sizes.</p>
  
  <p>Sass 3.2 is going to ship with an awesome new feature: blocks.  Just like Ruby.
  Instead of <code>yield</code>, you use <code>@content</code>. The rest is exactly the same. You can
  place anything inside your blocks: selectors (like <code>table.products</code>) and rules
  (like <code>border: 1px solid gold</code>).</p>
  
  <p>The <a href="https://github.com/nex3/sass/blob/master/doc-src/SASS_REFERENCE.md#passing-content-blocks-to-a-mixin-mixin-content">Sass
  documentation</a>
  mentions that you can use it to specify it for IE6 compatibility, but I like it
  most for making my design responsive. Just create a mixin that places the
  <code>@content</code> inside the <code>@media</code> directive.</p>
  
  <p>The following scss code defines mixins for small screens and big screens. You
  could even go further and define 3 categories, really small screens for mobile
  phones, medium sized screens like tablets and small desktop windows, and your
  normal big layout.</p>
  <pre><span class="Identifier">$site-width</span>: <span class="Number">1000px</span>;
  
  <span class="PreProc">@mixin</span> small-screen <span class="Function">{</span>
    <span class="Special">@media</span> only screen and (max-width: <span class="Identifier">$site-width</span> <span class="Special">+</span> 99px) <span class="Function">{</span>
      @content;
    <span class="Function">}</span>
  <span class="Function">}</span>
  
  <span class="PreProc">@mixin</span> big-screen <span class="Function">{</span>
    <span class="Special">@media</span> only screen and (min-width: <span class="Identifier">$site-width</span> <span class="Special">+</span> 100px) <span class="Function">{</span>
      @content;
    <span class="Function">}</span>
  <span class="Function">}</span></pre>
  <p>I add around 100px, which makes the switch between big and small screen styling
  happen a bit earlier. This makes it always have a bit of margin, which I like.</p>
  
  <p>For smaller screens, it is common to make the site fill the width of the window
  and place columns underneath each other. The following code does that.</p>
  <pre><span class="Identifier">$grid-count</span>: <span class="Number">12</span>;
  
  <span class="Special">.</span><span class="Type">container</span> <span class="Function">{</span>
    <span class="PreProc">@include</span> big-screen <span class="Function">{</span>
      <span class="Type">width</span>: <span class="Identifier">$site-width</span>;
      <span class="Type">margin</span>: <span class="Number">0</span> <span class="Type">auto</span>;
    <span class="Function">}</span>
    <span class="PreProc">@include</span> small-screen <span class="Function">{</span>
      <span class="Type">width</span>: <span class="Type">auto</span>
    <span class="Function">}</span>
  <span class="Function">}</span>
  <span class="Special">.</span><span class="Type">column</span> <span class="Function">{</span>
    <span class="PreProc">@include</span> big-screen <span class="Function">{</span>
      <span class="Type">width</span>: <span class="Identifier">$site-width</span> / <span class="Identifier">$grid-count</span>;
      <span class="Type">float</span>: <span class="Type">left</span>;
    <span class="Function">}</span>
    <span class="PreProc">@include</span> small-screen <span class="Function">{</span>
      <span class="Type">width</span>: <span class="Type">auto</span>;
      <span class="Type">float</span>: <span class="Type">none</span>;
    <span class="Function">}</span>
  <span class="Function">}</span></pre>
  <p>I have found that it with this approach, it is easiest to split the CSS into
  layout and styling. The styling, like colors and font-size, is probably the
  same on every screen, but the size, padding and floating of elements will
  change depending on the screen size.</p>
  
  <p>In this case, I&#39;d like place the <code>@media</code> directive around the tags, creating a
  clear distinction between layout for big and small screens:</p>
  <pre><span class="Identifier">$grid-count</span>: <span class="Number">12</span>;
  
  <span class="PreProc">@include</span> big-screen <span class="Function">{</span>
    <span class="Special">.</span><span class="Type">container</span> <span class="Function">{</span>
      <span class="Type">width</span>: <span class="Identifier">$site-width</span>;
      <span class="Type">margin</span>: <span class="Number">0</span> <span class="Type">auto</span>;
    <span class="Function">}</span>
    <span class="Special">.</span><span class="Type">column</span> <span class="Function">{</span>
      <span class="Type">width</span>: <span class="Identifier">$site-width</span> / <span class="Identifier">$grid-count</span>;
      <span class="Type">float</span>: <span class="Type">left</span>;
    <span class="Function">}</span>
  <span class="Function">}</span>
  
  <span class="PreProc">@include</span> small-screen <span class="Function">{</span>
    <span class="Special">.</span><span class="Type">container</span> <span class="Function">{</span>
      <span class="Type">width</span>: <span class="Type">auto</span>;
    <span class="Function">}</span>
    <span class="Special">.</span><span class="Type">column</span> <span class="Function">{</span>
      <span class="Type">width</span>: <span class="Type">auto</span>;
      <span class="Type">float</span>: <span class="Type">none</span>;
    <span class="Function">}</span>
  <span class="Function">}</span></pre>
  <p>It depends on your site, which approach works best for you. It will result in
  the same CSS. The <code>@media</code> directive is not allowed nested. <a href="https://github.com/nex3/sass/blob/master/doc-src/SASS_REFERENCE.md#media-media">Sass will
  automatically correct
  it</a>
  if for you anyway. You got to love Sass for things like this!</p>
  
  <p>I&#39;ve seen some projects with really complicated mixins, taking in really
  complicated arguments. This will definitely clean this up.</p>

toc: []

introduction: |-
  <p>A lot of websites have side bars. On normal desktop browsers, this fits nicely. But
  on smaller screens, it will create horizontal scrollbars. And those are a bad
  user experience. Luckily, CSS supports <code>@media</code> directives that act on
  different sizes.</p><p>Sass 3.2 is going to ship with an awesome new feature: blocks.  Just like Ruby.
  Instead of <code>yield</code>, you use <code>@content</code>. The rest is exactly the same. You can
  place anything inside your blocks: selectors (like <code>table.products</code>) and rules
  (like <code>border: 1px solid gold</code>).</p><p>The <a href="https://github.com/nex3/sass/blob/master/doc-src/SASS_REFERENCE.md#passing-content-blocks-to-a-mixin-mixin-content">Sass
  documentation</a>
  mentions that you can use it to specify it for IE6 compatibility, but I like it
  most for making my design responsive. Just create a mixin that places the
  <code>@content</code> inside the <code>@media</code> directive.</p>
